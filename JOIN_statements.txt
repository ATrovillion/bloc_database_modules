1. How do you find related data held in two separate data tables?
A JOIN statement is used to combine related data in separate data tables.

2. Explain, in your own words, the difference between an INNER JOIN, LEFT OUTER JOIN, and RIGHT OUTER JOIN. Give a real-world example for each.
    a. An INNER JOIN selects all rows from the joined tables that have matching values in both tables.
    b. A LEFT OUTER JOIN selects all matching rows for which an expression is true, as well as
    rows from the first table that do not match any row in the second table.
    c. A RIGHT OUTER JOIN selects all matching rows for which the expression is true, 
    as well as rows from the second table that do not match any row in the first table.


3. Define primary key and foreign key. Give a real-world example for each.
    a. A foreign key is a key used to link two tables together. The foreign key consists of a field in one table
    that refers to the primary key in the other table. The foreign key in a child table refers to the primary key
    in the parent table.
    b. Imagine two tables in a retail database. One table contains information about customer attributes such as a
    customer id, first and last name, and age. Another table contains information about orders, with information
    about order number, order contents, and a customer id indicating which customer made the purchase.
    In our example, the customer id in the customer table is a primary key, and the customer id in the orders table
    is the foreign key that refers to the primary key in the customer table.

4. Define aliasing.
    Aliasing is a technique whereby table names are abbreviated, thus simplifying queries.


5. Change this query so that you are using aliasing:
    SELECT p.name, c.salary, c.vacation_days 
    FROM professor AS p 
    JOIN compensation AS c
    ON p.id = c.professor_id;

6. Why would you use a NATURAL JOIN? Give a real-world example.
    A NATURAL JOIN is useful where another type of JOIN might render duplicate columns, or to simplify queries
    involving tables with a number of columns in common.

7. Using this Employee schema and data, write queries to find the following information:
    a. List all employees and all shifts.
        SELECT shifts.*, employees.name
        FROM shifts
        FULL OUTER JOIN scheduled_shifts
        ON shifts.id = scheduled_shifts.shift_id
        FULL OUTER JOIN employees
        ON scheduled_shifts.employee_id = employees.id;

8. Using this Adoption schema and data, please write queries to retrieve the following information and include the results:

    a. Create a list of all volunteers. If the volunteer is fostering a dog, include each dog as well.
        SELECT volunteers.id, volunteers.first_name, volunteers.last_name, dogs.id, dogs.name
        FROM volunteers
        LEFT OUTER JOIN dogs
        ON volunteers.foster_dog_id = dogs.id;

    b. The cat's name, adopter's name, and adopted date for each cat adopted within the past month to be displayed as part of the "Happy Tail"
     social media promotion which posts recent successful adoptions.
        SELECT cats.name, cat_adoptions.date, adopters.first_name, adopters.last_name
        FROM cats
        JOIN cat_adoptions
        ON cats.id = cat_adoptions.cat_id
        JOIN adopters
        ON cat_adoptions.cat_id = adopters.id;

    c. Create a list of adopters who have not yet chosen a dog to adopt.
        SELECT adopters.first_name, adopters.last_name
        FROM adopters
        JOIN dog_adoptions
        ON adopters.id != dog_adoptions.adopter_id;


    d. Lists of all cats and all dogs who have not been adopted.
        SELECT dogs.name, dogs.id
        FROM dogs
        LEFT JOIN dog_adoptions
        ON dogs.id = dog_adoptions.dog_id
        WHERE dog_adoptions.dog_id IS NULL;

        SELECT cats.name, cats.id
        FROM cats
        LEFT JOIN cat_adoptions
        ON cats.id = cat_adoptions.cat_id
        WHERE cat_adoptions.cat_id IS NULL;

    
    e. The name of the person who adopted Rosco.
        SELECT adopters.first_name, adopters.last_name, dogs.name
        FROM adopters
        JOIN dog_adoptions
        ON adopters.id = dog_adoptions.adopter_id
        JOIN dogs
        ON dog_adoptions.dog_id = dogs.id;


9. Using this Library schema and data, write queries applying the following scenarios and include the results:

    a. To determine if the library should buy more copies of a given book, please provide the names and position, in order, of all of the patrons with a hold (request for a book with all copies checked out) on "Advanced Potion-Making".
        SELECT patrons.name, patrons.id, holds.rank
        FROM patrons
        JOIN holds
        ON patrons.id = holds.patron_id AND holds.isbn LIKE '9136884926'
        ORDER BY holds.rank;

    b. List all of the library patrons. If they have one or more books checked out, list the books with the patrons.
        SELECT DISTINCT patrons.*, books.title
        FROM patrons
        LEFT OUTER JOIN transactions
        ON patrons.id = transactions.patron_id
        LEFT JOIN books
        ON transactions.isbn = books.isbn AND transactions.checked_in_date IS NULL
        ORDER BY patrons.id;